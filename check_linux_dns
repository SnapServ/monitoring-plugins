#!/usr/bin/env python
# SnapServ/monitoring-plugins - Simple and reliable Nagios / Icinga plugins
# Copyright (C) 2016 SnapServ - Pascal Mathis
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import logging
import argparse
import nagiosplugin
import time
import dns.resolver

from shared.common import ExceptionContext

_log = logging.getLogger('nagiosplugin')


class Dns(nagiosplugin.Resource):
    def __init__(self, server, query_name, rd_type, timeout):
        self.server = server
        self.query_name = query_name
        self.rd_type = rd_type
        self.timeout = timeout

    def probe(self):
        if not self.server:
            resolver = dns.resolver.Resolver(filename='/etc/resolv.conf', configure=True)
        else:
            resolver = dns.resolver.Resolver(configure=False)
            resolver.nameservers = [self.server]

        resolver.timeout = resolver.lifetime = self.timeout

        try:
            start_time = time.time()
            _log.info('Querying system nameservers for "%s" with type "%s"' % (self.query_name, self.rd_type))
            answer = resolver.query(self.query_name, self.rd_type)
            response_time = time.time() - start_time
            records = [str(record) for record in answer.rrset]
            _log.debug('Query result: ' + ', '.join(records))

            if response_time > self.timeout:
                _log.debug('Manually raising timeout exception, as dnspython only supports whole seconds.')
                raise dns.exception.Timeout()

            return nagiosplugin.Metric('response_time', response_time, min=0, uom='s')
        except dns.exception.DNSException as exception:
            _log.info('Query has failed with an exception: ' + str(exception))
            return nagiosplugin.Metric('exception', exception)


class DnsSummary(nagiosplugin.Summary):
    def __init__(self, server, timeout):
        self.server = server
        self.timeout = timeout

    def ok(self, results):
        message = 'Response time is %ss' % round(results['response_time'].metric.value, 3)
        if self.server:
            message = '%s: %s' % (self.server, message)

        return message

    def problem(self, results):
        if 'exception' in results and type(results['exception'].metric.value) == dns.exception.Timeout:
            message = '%s (>%s seconds)' % (str(results['exception'].metric.value), self.timeout)
        else:
            message = super(DnsSummary, self).problem(results)

        if self.server:
            message = '%s: %s' % (self.server, message)

        return message


@nagiosplugin.guarded()
def main():
    argp = argparse.ArgumentParser(description=__doc__)
    argp.add_argument('-s', '--server', default=None,
                      help='Specifies the DNS server to use. If not specified, use the system DNS resolvers.')
    argp.add_argument('-q', '--query-name', required=True,
                      help='Specifies the query name for the DNS resolution check.')
    argp.add_argument('-r', '--rd-type', required=True, help='Specifies the query type for the DNS resolution check.')
    argp.add_argument('-t', '--timeout', required=True, type=float,
                      help='Specifies the timeout for the DNS resolution check.')
    argp.add_argument('-w', '--warning', metavar='RANGE', default='',
                      help='Return warning if response time is outside RANGE')
    argp.add_argument('-c', '--critical', metavar='RANGE', default='',
                      help='Return critical if response time is outside RANGE')
    argp.add_argument('-v', '--verbose', action='count', default=0,
                      help='Increase output verbosity (use up to 3 times)')
    args = argp.parse_args()

    check = nagiosplugin.Check(Dns(args.server, args.query_name, args.rd_type, args.timeout),
                               nagiosplugin.ScalarContext('response_time', args.warning, args.critical),
                               ExceptionContext(), DnsSummary(args.server, args.timeout))
    check.main(verbose=args.verbose)


if __name__ == '__main__':
    main()
